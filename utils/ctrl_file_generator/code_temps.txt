{ "comms_setup":

"
# In here, you will define the information dictionaries and establish the communications
# with the other parts of the code through the ControllerComms object

######################################################################
################## Add any relevant imports in here ##################
######################################################################

from srv import  # Put service class here
from msg import  # Put message classes here
from controller_pkg.utils.ros_comms import ControllerComms

# Things you need to import:
#   1. Runner object from the ctrl_setup script
#   2. ControllerComms object
#   3. Import relevant ROS messages and service

NODE_NAME =  None # Node name for the movement controllers

RUNNER =  None # Put the runner

######################################################################
################## Put message and service info here #################
######################################################################

MSGS_INFO = {
    \"active_ctrls\":
        {
            \"msg\": None,  # ROS Message object corresponding to the active controllers
            \"queue_size\": None, # Queue size for the server
            \"topic\": None # Topic name for the active controllers
        },
    \"actuators\":
        {
            \"defaults\":  # Dictionary with the names of all the actuators as keys and their default value as values
            {
                \"actuator_i\": None, # Name of the ith actuator as the key and as a value its default value
            },
            \"msg\": None, # ROS Message object corresponding to the actuators
            \"queue_size\": None, # Queue size for the actuator publisher
            \"topic\": None # Topic name for the set of actuators
        },
    \"measurements\":
        {
            \"msg\": None, # ROS Message object corresponding to the measurements
            \"topic\": None # Topic name for the measurements
        },
    \"set_points\":
        {
            \"msg\": None, # ROS Message object corresponding to the set points
            \"topic\": None # Topic name for the set points
        },
    \"verifier\":
        {
            \"service\": None, # Service name for the service
            \"srv\": None # ROS Service object corresponding to the verifier
        }
}


######################################################################
################## Enter controller information here #################
######################################################################

CTRLS_INFO = {
     \"ctrl_i\": # Name of the ith controller in the control system. Each of these comes with
                      # a dictionary with info as values as shown below
          {
          \"actuators\": None, # The set of actuators this controller uses. Must be set object containing the
                               # name of the actuators
          \"inputs\": None # Names of the inputs to the controller
          }
}


if __name__ == \"__main__\":

    ControllerComms(NODE_NAME, RUNNER, MSGS_INFO, CTRLS_INFO)",

"ctrl_setup":

"
# In here, you will put the pyrunner code that you used to generate the contents in your
# runner_gen.py script.

######################################################################
################## Add any relevant imports in here ##################
######################################################################

# Things you need to import:
#   1. Import the pyrunner package

######################################################################
############## Add pyrunner code to generate runner here #############
######################################################################

# Note that this code is just here in case you need to generate the runner again for
# documentation/preservation purposes
",

"runner_gen":

"
# In here, you enter the resultant runner code to run the control systems

######################################################################
################ Add the generated runner script here ################
######################################################################
"
}
